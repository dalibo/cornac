import pytest
from flask import request


def test_missing_token(app):
    from cornac.web.rds import authenticate, errors

    with app.test_request_context():
        with pytest.raises(errors.MissingAuthenticationToken):
            authenticate(request)

    with app.test_request_context(headers=[('Authorization', 'malformed')]):
        with pytest.raises(errors.MissingAuthenticationToken):
            authenticate(request)

    minimal = 'algo Credential=k/d/rg/rds/term, SignedHeaders=X, Signature=X'

    with app.test_request_context(headers=[('Authorization', minimal)]):
        with pytest.raises(errors.InvalidClientTokenId):
            authenticate(request, credentials=dict(key='notsecret'))


def test_parse_authorization():
    from cornac.web.auth import Authorization, errors

    raw = (
        'AWS4-HMAC-SHA256 '
        'Credential=AKIAIO46HSYHYN/20190409/eu-west-3/rds/aws4_request, '
        'SignedHeaders=content-type;host;x-amz-date, '
        'Signature=7313b609a8f3f794d9408c4a4a2327b9a2e8ffdc3ecb47')

    value = Authorization.parse(raw)
    assert 'AWS4-HMAC-SHA256' == value.algorithm
    assert 'AKIAIO46HSYHYN' == value.access_key
    assert '20190409' == value.date
    assert 'eu-west-3' == value.region_name
    assert 'rds' == value.service_name
    assert 'aws4_request' == value.terminator
    assert ['content-type', 'host', 'x-amz-date'] == value.signed_headers
    assert '7313b609a8f3f794d9408c4a4a2327b9a2e8ffdc3ecb47' == value.signature

    assert raw == str(value)

    value.date = '20190410'
    assert raw != str(value)
    assert value.date in str(value)

    raw = (
        'AWS4-HMAC-SHA256 '
        'Credential=AKIAIO46HSYHYN/20190409/eu-west-3/rds/aws4_request, '
        'SignedHeaders=content-type;host;x-amz-date, ')

    with pytest.raises(errors.IncompleteSignature):
        Authorization.parse(raw)


def test_check_authorization(app, mocker):
    SigV4Auth = mocker.patch('cornac.web.auth.SigV4Auth')
    mk_awsreq = mocker.patch('cornac.web.auth.make_boto_request')

    from cornac.web.auth import Authorization, check_request_signature, errors

    req = mocker.Mock(name='request', headers={
        'Content-Type': 'text/xml; charset=utf-8',
        'Host': 'localhost',
        'X-Amz-Date': '2019â€¦',
    })
    awsreq = mk_awsreq.return_value
    awsreq.context = {}
    signer = SigV4Auth.return_value
    signer.signature.return_value = 'mocked-signature'

    auth = Authorization(
        access_key='k',
        algorithm='AWS4-HMAC-SHA256',
        signed_headers=['content-type', 'host', 'x-amz-date'],
        date='20190410',
        signature='mocked-signature',
    )

    # First, ensure our mock setup is ok.
    check_request_signature(req, auth, secret_key='X')

    tmp_auth = auth.copy(algorithm='BAD-ALGO')
    with pytest.raises(errors.IncompleteSignature):
        check_request_signature(req, tmp_auth, secret_key='X')

    tmp_auth = auth.copy(signature='other-signature')
    with pytest.raises(errors.SignatureDoesNotMatch):
        check_request_signature(req, tmp_auth, secret_key='X')

    tmp_auth = auth.copy(terminator='bad_terminator')
    with pytest.raises(errors.SignatureDoesNotMatch):
        check_request_signature(req, tmp_auth, secret_key='X')

    tmp_auth = auth.copy(signed_headers=['content-type'])
    with pytest.raises(errors.SignatureDoesNotMatch):
        check_request_signature(req, tmp_auth, secret_key='X')

    tmp_req = mocker.Mock(name='request', headers={'X-Missing-Header': ''})
    with pytest.raises(errors.SignatureDoesNotMatch):
        check_request_signature(tmp_req, auth, secret_key='X')


def test_check_signature(app, mocker):
    from cornac.web.auth import Authorization, check_request_signature

    # Reproduce a sniffed awscli request.
    sig = 'ba2313b677a9d953205cf6f1be9d9f4f4e01c0a84350c334d2f1730761375804'
    raw_auth = (
        'AWS4-HMAC-SHA256 '
        'Credential=DEFAULTACCESSKEY/20190409/local/rds/aws4_request, '
        'SignedHeaders=content-type;host;x-amz-date, '
        f'Signature={sig}'
    )

    # This is the actual canonical request as generated by awscli:
    #
    # POST
    # /rds
    #
    # content-type:application/x-www-form-urlencoded; charset=utf-8
    # host:localhost:5000
    # x-amz-date:20190409T160556Z
    #
    # content-type;host;x-amz-date
    # e6281fe3d540e3e1ccd6bf0cca945a0e0af993d4dd5a6b31ca021f6fc7982b0b

    kw = dict(
        method='POST',
        base_url='http://localhost:5000',
        path='/rds',
        data='Action=DescribeDBInstances&Version=2014-10-31',
        # Restricted to signed headers.
        headers={
            # This header is not signed.
            'Content-Length': '45',
            'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',
            'X-Amz-Date': '20190409T160556Z',
            'Authorization': raw_auth,
        },
    )
    auth = Authorization.parse(raw_auth)

    # Ok, now check this request and signature!
    with app.test_request_context(**kw) as ctx:
        check_request_signature(
            ctx.request,
            auth, secret_key='notsecret',
            region='local')
