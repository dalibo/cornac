#!/bin/bash -eu

set -o pipefail
shopt -s expand_aliases

# Setup logging. If DEBUG env is set, output everything to stderr. Else, keep
# tty opened in FD 3, redirect stdout to stderr, and stderr to $LOGFILE. This
# way, everything is catched in LOGFILE, message to user must be sent to FD 3
# with log() or fatal().
if [ -n "${DEBUG-}" ] ; then
	exec 3>/dev/null
	# On debug mode, just alias log to :, set -x shows messages in stderr.
	alias log=:
else
	LOGFILE=/var/log/cornac-setup.log
	exec 3>&2 2>${LOGFILE} 1>&2
	chmod 0600 ${LOGFILE}
	trap 'catchall' INT EXIT TERM
	log() {
		echo "$@" >&3
	}
fi

catchall() {
	if [ $? -gt 0 ] ; then
		fatal "Failure. See ${LOGFILE} for details."
	else
		rm -f ${LOGFILE}
	fi
	trap - INT EXIT TERM
}

create_user() {
	local name=$1; shift
	local groups="$@"

	local home=/etc/opt/cornac/${name#*-}
	if ! getent passwd $name ; then
		log "Creating system user $name."
		useradd \
			--system --user-group --shell /sbin/nologin \
			--home-dir $home \
			$name &>/dev/null
	fi

	install --directory --mode 0750 --owner $name --group $name $home
	install --no-target-directory --owner $name --group $name --mode 0644 bashrc $home/.bashrc
	if [ -n "${groups[*]}" ] ; then
		usermod --append --groups "${groups[@]}" $name
	fi
}

fatal() {
	echo -e "\e[1;31m$@\e[0m" >&3
	exit 1
}

guess_domain() {
	local fqdn=$(hostname --fqdn)
	if [ -n "${fqdn##*.*}" ] ; then
		# FQDN is not configured. We only have hostname.
		hostname=$fqdn
		for ip in $(hostname --all-ip-addresses) ; do
			if fqdn=$(getent hosts $ip | grep -Po "$ip\s+\K(${hostname}\..*)") ; then
				break
			fi
			fqdn=
		done
	fi

	if [ -n "${fqdn##*.*}" ] ; then
		return 1
	fi

	echo "${fqdn#*.}"
}

pwgen() {
	# Generates a random password of 32 hexadecimal characters.
	od -vN $((${1-32} / 2)) -An -tx1 /dev/urandom | tr -d ' \n'
}

write_config() {  # <owner> <path> [mode]
	# File content is read from stdin.

	local owner=$1; shift
	local path=$1; shift
	local mode=${1-0600}
	log "Writing configuration in ${path}."
	touch $path
	chown $owner: $path
	chmod $mode $path
	cat >$path
}

# Now, log everything. This is very verbose.
set -x


#       M A I N

# Move to datadir so that other files are in current directory.
cd $(readlink -m ${BASH_SOURCE[0]}/..)

if ! locale -a | grep -q en_US.utf8 ; then
	fatal "Cornac requires missing en_US.utf8 locale."
fi

mkdir -p /etc/opt/cornac

if ! domain=$(guess_domain) ; then
	fatal "Can't guess domain."
fi
log "Detected DNS domain .${domain} ."

#       C O R N A C   W E B

create_user cornac-web

CORNAC_WEB_CONFIG=~cornac-web/cornac.py
write_config cornac-web $CORNAC_WEB_CONFIG 0640 <<EOF
#
#        C O R N A C   W E B   C O N F I G U R A T I O N
#
# Generated by $0 at $(date).
#
# This file is inherited by cornac worker configuration.
#

# AWS credentials. See cornac generate-credentials to assist credentials
# setting.
CREDENTIALS = {}

# The DNS domain to build Postgres host resolvable FQDN.
DNS_DOMAIN = '.${domain}'

# The prefix of all Postgres VM.
MACHINE_PREFIX = 'cornac-'

# URI to cornac own Postgres instance, build from options above.
SQLALCHEMY_DATABASE_URI = f"postgresql://cornac:$(pwgen)@{MACHINE_PREFIX}cornac{DNS_DOMAIN}/cornac"
EOF

write_config cornac-web ~cornac-web/environment.conf <<EOF
CORNAC_CONFIG=${CORNAC_WEB_CONFIG}
EOF


#       C O R N A C   W O R K E R

create_user cornac-worker cornac-web

if ! [ -f ~cornac-worker/.ssh/id_rsa ] ; then
	log "Generating SSH private key for cornac-worker."
	sudo -nu cornac-worker ssh-keygen -q -b 4096 -t rsa -f ~cornac-worker/.ssh/id_rsa -N ""
fi

write_config cornac-worker ~cornac-worker/.ssh/config <<EOF
Host *
    AddKeysToAgent yes
EOF

CORNAC_WORKER_CONFIG=~cornac-worker/cornac.py
write_config cornac-worker $CORNAC_WORKER_CONFIG <<EOF
#
#        C O R N A C   W O R K E R   C O N F I G U R A T I O N
#
# Generated by $0 at $(date).
#

# Configure here IAAS access.
#
# For libvirt:
# IAAS = 'libvirt+'
#
# For vCenter:
# IAAS = 'vcenter+https://user@sso:password@vcenter.lan/'
IAAS = None

#       V C E N T E R
#
# If you run cornac on vCenter, you need to adapt the following options:
#
# NETWORK = 'datacenter1/network/My Network'
# MACHINE_ORIGIN = 'datacenter1/vm/cornac--origin'
# STORAGE_POOL = 'datacenter1/datastore/datastore1'
# VCENTER_RESOURCE_POOL = 'datacenter1/host/host1/Resources'
EOF

write_config cornac-worker ~cornac-worker/environment.conf <<EOF
CORNAC_CONFIG=${CORNAC_WEB_CONFIG},${CORNAC_WORKER_CONFIG}
EOF

log "Reloading systemd."
systemctl daemon-reload

log "Done."
log
log "Cornac is pre-configured. Continue with Installation documentation."
log
